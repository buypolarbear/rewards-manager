package es.eucm.rewards;

import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Iterator;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.QRCodeCompatibleBase32Encoder;

public class RewardsTokenGenerator implements Iterable<String> {
	/**
	 * Default number of random generated bytes.
	 */
	public static final int DEFAULT_NONCE_SIZE = 5;
	
	private SecureRandom rnd;
	
	private String secret;

	public RewardsTokenGenerator(String secret) {
		this.rnd = new SecureRandom();
		this.secret = secret;
	}

	private byte[] hmacSha1(byte[] value) {
			// Get an hmac_sha1 key from the raw key bytes
			byte[] keyBytes = this.secret.getBytes();
			SecretKeySpec signingKey = new SecretKeySpec(keyBytes, "HmacSHA1");

			// Get an hmac_sha1 Mac instance and initialize with the signing key
			Mac mac;
			byte[] rawHmac = new byte[0];
			try {
				mac = Mac.getInstance("HmacSHA1");
				mac.init(signingKey);
				// Compute the hmac on input data bytes
				rawHmac = mac.doFinal(value);
			} catch (NoSuchAlgorithmException e) {
				throw new RuntimeException("Error generating HMAC-SHA1", e);
			} catch (InvalidKeyException e) {
				throw new RuntimeException("Error generating HMAC-SHA1", e);
			}

			return rawHmac;
	}

	public Iterator<String> iterator() {
		return new GeneratorIterator(DEFAULT_NONCE_SIZE);
	}
	
	private class GeneratorIterator implements Iterator<String> {
		private static final String QRCODE_ALPHANUMERIC_CHARACTERS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
		
		private byte[] nonce;
		
		public GeneratorIterator(int size) {
			this.nonce = new byte[size];			
		}
		
		public boolean hasNext() {
			return true;
		}

		public String next() {
			rnd.nextBytes(this.nonce);
			
			int size = this.nonce.length;
			int longSize = 8;
			long tstamp = System.currentTimeMillis();

			// Create a buffer large enough to store the random bytes + timestamp
			byte[] buffer = new byte[size+longSize];
			System.arraycopy(this.nonce, 0, buffer, 0, 0);
			
			// Add timestamp to the buffer
			byte[] tstampArray = ByteBuffer.allocate(longSize).putLong(tstamp).array();
			System.arraycopy(tstampArray, 0, buffer, size, longSize);
			
			byte[] signed = hmacSha1(buffer);
			
			QRCodeCompatibleBase32Encoder encoder = new QRCodeCompatibleBase32Encoder();
			return new StringBuilder().append(encoder.encodeToString(tstampArray))
			.append("$").append(encoder.encodeToString(signed)).toString();
		}

		public void remove() {
			throw new UnsupportedOperationException("Operation not permitted");
		}
		
	}
}
